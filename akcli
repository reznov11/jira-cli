#!/usr/local/bin/python

import time
import argparse
import argcomplete
from jira import JIRA
from typing import Any

from pip._internal.req.req_file import build_parser

from config.settings import *
import dateutil.parser as dtime
from collections import namedtuple


class JiraCli:
  def __init__(self, args):
    self.args = args

  def create(self):
    """
      Create new issue by providing dictionary of data
      Here I faced a problem, by using REST API service
      creating a new issue continuously returning 400 error from the server says
      transition and assigner missing, by that I decided to use jira library for the whole project
      but in the upcoming versions I'll resolve the problem.
    """
    issue_dict = {
      'project': {'key': f"{self.args.projectKey}"},
      'summary': ' '.join(string for string in self.args.summary) or '',
      'description': ' '.join(string for string in self.args.description),
      'issuetype': {'name': self.args.type},
      'environment': self.args.environment,
    }
    print('Create issue:', issue_dict)
    new_issue = self.auth.create_issue(fields=issue_dict)
    print('\nIssue created successfully, issue key:', new_issue, '\n')

  def dump(self):
    """
      Dump data of the given parameter
      issues or projects
    """
    if self.args.dump == 'projects':
      projects = self.auth.projects()
      for project in projects:
        text = f'ID = {project.id}\n'
        text += f'Key = {project.key}\n'
        text += f'Name = {project.name}\n'
        text += '-------------------------'
        print(text)
    else:
      if self.args.issueKey and not self.args.projectKey:
        issues = self.get_issue(self.args.issueKey)
      else:
        issues = self.global_search(jql_query=f"project='{self.args.projectKey}'")

      self.get_data(issues=issues, single=False if isinstance(issues, list) else True)

  def transition(self):
    """
      Implement transition on issue
      To Do = 11
      In Progress = 21
      In Review = 31
      Done = 41 or 31
    """
    if self.args.transitionId:
      issue = self.auth.issue(self.args.issueKey)
      transitions = self.auth.transitions(issue)
      self.auth.transition_issue(self.args.issueKey, self.args.transitionId)

  def delete(self):
    """
      Delete an issue by the given issueKey
    """
    if self.args.issueKey:
      issue = self.auth.issue(self.args.issueKey)
      issue.delete()

  def close(self):
    """
      Close an issue by sitting it status to Done
    """
    if self.args.issueKey:
      issue = self.auth.issue(self.args.issueKey)
      transitions = self.auth.transitions(issue)
      self.auth.transition_issue(self.args.issueKey, '81')

  def comment(self):
    """
      Comment on issue
    """
    if self.args.issueKey:
      self.auth.add_comment(self.args.issueKey, self.args.commentBody)
      # visibility={'type': 'role', 'value': 'Administrator'

  def assign(self):
    """
      Assign issue to new user
    """
    if self.args.assign:
      if not self.args.accountId:
        print('Please type the user name who you want to assign the issue to.')
        return
      issue = self.get_issue(self.args.issueKey)
      issue.update(assignee={'accountId': self.args.accountId})

  def filter(self):
    fi = f''

    if self.args.projectKey:
      progs = [f"{pr.replace(' ', '', 1)}" for pr in self.args.projectKey.split(',')]

      if len(progs) > 1:
        fi += f'project in {tuple(progs)} '

      else:
        fi += f"project='{self.args.projectKey}' "

      if self.args.text:
        fi += f'AND text ~ "{self.args.text}"'

      if self.args.status:

        if not isinstance(self.args.status, str):
          print('Status must be a list of strings seperated by comma, for example: "To Do, In progress"')
          return

        status = [st.replace(" ", '', 1) for st in self.args.status.split(',')]

        if len(status) > 1:
          fi += f' AND status in {tuple(status)}'

        else:
          fi += f' AND status in ("{self.args.status}")'

      if self.args.myIssues:
        fi += f' AND reporter in (currentUser()) '

      if self.args.unassigned:
        fi += f' AND assignee in (EMPTY)'

      if self.args.issuetype:

        if not isinstance(self.args.issuetype, str):
          print('Issue types must be a list of strings seperated by comma, for example: "Task, Bug"')
          return

        types = [tp.replace(" ", '', 1) for tp in self.args.issuetype.split(',')]

        if len(types) > 1:
          fi += f' AND issuetype in {tuple(types)}'

        else:
          fi += f' AND issuetype in ("{self.args.issuetype}")'

      print("Filter:", fi, '\n')
      self.global_search(fi)
      # return fi
    else:
      print('--projectKey is required.')
      return

  def get_issue(self, issue):
    issue = self.auth.issue(issue)
    return issue

  def watchers(self):
    if self.args.issueKey:
      issue = self.get_issue(self.args.issueKey)
      watcher = self.auth.watchers(issue)
      print("Issue has {} watcher(s)".format(watcher.watchCount), '\n')
      for watcher in watcher.watchers:
        print('User name:', watcher)
        print('User id:', watcher.accountId)
        print('User email:', watcher.emailAddress)
        print('--------------------')

  def global_search(self, jql_query):
    """
      Here we check if the user provided a limit size to get issues
    :param jql_query:
    :return:
    """

    # Think of an offset as page number
    # from where to start the next object
    offset = self.args.offset or 0
    size = self.args.limit or 100

    # maxResults represent maximum number of issues
    # startAt represent the number from where to start the counting
    query = self.auth.search_issues(jql_query, maxResults=size, startAt=offset)
    self.get_data(query)

  def get_data(self, issues, single=False):

    if not single:
      print("Total:", issues.total)
      print('Issues found:', len(issues), '\n')
      time.sleep(3)
      for issue in issues:
        self.data_template(issue=issue)
    else:
      self.data_template(issue=issues)

  def data_template(self, issue):
    if issue:
      created_dtime = self.date_formatter(issue.fields.created)
      single_issue = f'Issue Link = {MAIN_URL}rest/api/3/issue/{self.args.issueKey}'
      single_issue += f'Project name = {issue.fields.project}\n'
      single_issue += f'Ticket number = {issue}\n'
      single_issue += f'Creator = {issue.fields.creator}\n'
      single_issue += f'IssueType = {issue.fields.issuetype.name}\n'
      single_issue += f'Status = {issue.fields.status.name}\n'
      single_issue += f'Summary = {issue.fields.summary}\n'
      single_issue += f'Description = {issue.fields.description}\n'
      single_issue += f'Votes = {issue.fields.votes.votes}\n'
      if issue.fields.environment:
        single_issue += f'Environment = {issue.fields.environment}\n'
      single_issue += f'Created = {created_dtime.strftime("%d-%m-%Y %H:%M:%S")}\n'

      comments = self.comments(issue_key=issue.key)
      if comments:
        single_issue += "Comments:\n"
        single_issue += "------------"
        for id, comment in enumerate(comments, 1):
          single_issue += f"\n({id})- By %s: %s" % (comment.author.displayName, comment.body)

      print(single_issue)
      print("==================================")

  def comments(self, issue_key):
    comments = self.auth.comments(issue_key)
    return comments

  @staticmethod
  def date_formatter(date) -> Any:
    return dtime.parse(date)

  @staticmethod
  def getter(args):
    """
      Future function to convert dictionary keys into properties
    """
    return namedtuple('Dict', ' '.join(list(args.keys())))(**args)

  @property
  def auth(self):
    """
      Basic authorization for JIRA
    """
    auth_jira = JIRA(MAIN_URL, basic_auth=(AUTH_USER, AUTH_TOKEN))
    return auth_jira


def main_func(args):
  """
  Initialize main class
  """
  akcli = JiraCli(args=args)

  if args.create:
    print(args.create)
    akcli.create()

  if args.dump:
    akcli.dump()

  if args.delete:
    akcli.delete()

  if args.close:
    akcli.close()

  if args.comment:
    akcli.comment()

  if args.transition:
    akcli.transition()

  if args.assign:
    akcli.assign()

  if args.watchers:
    akcli.watchers()

  if args.filter:
    akcli.filter()


if __name__ == '__main__':
  # create the top-level parser
  parser = argparse.ArgumentParser(prog='JIRA Command Line Interface')
  parser.add_argument('--issueKey', dest="issueKey", help='issue key or id')
  parser.add_argument('--projectKey', dest="projectKey", help='issue key or id')
  parser.add_argument('--offset', dest="offset", help='Define offset of limit start')
  parser.add_argument('--limit', dest="limit", help='Define size of issues')

  # Create issue
  parser.add_argument('--create', action='store_true', help='create an issue')
  create_sub_parse = parser.add_subparsers(help='sub commands for creating issue')
  sub_create = create_sub_parse.add_parser('issue', help='create issue is sub-command with sub-commands')
  sub_create.add_argument('--type', required=True, type=str, help='issue type')
  sub_create.add_argument('--description', required=True, type=str, nargs='*', help='issue description')
  sub_create.add_argument('--summary', required=True, type=str, nargs='*', help='issue summary')
  sub_create.add_argument('--environment', required=True, type=str, help='issue environment')

  # Dump issue
  parser.add_argument(
    '--dump',
    default=None,
    nargs='?',
    choices=['issues', 'projects'],
    help='dump projects, issues, (default: %(default)s)'
  )

  # Delete issue
  parser.add_argument('--delete', action='store_true', help='delete an issue')

  # Close an issue
  parser.add_argument('--close', action='store_true', help='delete an issue')

  # Do transition
  parser.add_argument('--transition', action='store_true', help='transit an issue')
  parser.add_argument(
    '--transitionId',
    type=int,
    dest="transitionId",
    choices=[11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 111],
    help='transit an issue'
  )

  # Comment on issue
  parser.add_argument('--comment', action='store_true', help='comment on issue')
  parser.add_argument('--commentBody', dest="commentBody", help='comment body')

  # Get watchers
  parser.add_argument('--watchers', action='store_true', help="Get users of issue")

  # Assign issue
  parser.add_argument('--assign', action='store_true', help="Assign issue to a user")
  parser.add_argument('--accountId', help='User ID to assign')

  # Filter
  parser.add_argument('--filter', action='store_true', help='Advanced filter')
  parser.add_argument('--issuetype', help='Filter by issue type')
  parser.add_argument('--text', help='Filter by text or description')
  parser.add_argument('--myIssues', action="store_true", help='Filter only my issues')
  parser.add_argument('--status', help='Filter by status')
  parser.add_argument('--unassigned', action="store_true", help='Filter by unassigned issues')

  argcomplete.autocomplete(parser)
  args = parser.parse_args()

  main_func(args=args)
